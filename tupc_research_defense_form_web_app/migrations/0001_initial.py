# Generated by Django 4.0.4 on 2022-08-02 01:48

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PanelConformeBET3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_leader_username', models.CharField(max_length=256)),
                ('dept_head', models.CharField(max_length=256)),
                ('dept_head_status', models.CharField(max_length=256)),
                ('panel_member_1', models.CharField(max_length=256)),
                ('panel_member_2', models.CharField(max_length=256)),
                ('panel_member_3', models.CharField(max_length=256)),
                ('panel_member_4', models.CharField(max_length=256)),
                ('panel_member_5', models.CharField(max_length=256)),
                ('panel_member_status_1', models.CharField(max_length=256)),
                ('panel_member_status_2', models.CharField(max_length=256)),
                ('panel_member_status_3', models.CharField(max_length=256)),
                ('panel_member_status_4', models.CharField(max_length=256)),
                ('panel_member_status_5', models.CharField(max_length=256)),
                ('student_member_1', models.CharField(max_length=256)),
                ('student_member_2', models.CharField(max_length=256)),
                ('student_member_3', models.CharField(max_length=256)),
                ('student_member_4', models.CharField(max_length=256)),
                ('student_member_5', models.CharField(max_length=256)),
                ('course', models.CharField(max_length=256)),
                ('major', models.CharField(max_length=256)),
                ('research_title', models.CharField(max_length=256)),
                ('date_submitted', models.CharField(max_length=256)),
                ('form_status', models.CharField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='ResearchTitle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('research_title', models.CharField(max_length=256)),
                ('course', models.CharField(max_length=256)),
                ('major', models.CharField(max_length=256)),
                ('student_leader_username', models.CharField(max_length=256)),
                ('student_leader_name', models.CharField(max_length=256)),
                ('status', models.CharField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='StudentCourseMajor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.CharField(max_length=256)),
                ('major', models.CharField(max_length=256)),
                ('course_major_abbr', models.CharField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('course', models.CharField(blank=True, max_length=256)),
                ('department', models.CharField(blank=True, max_length=256)),
                ('honorific', models.CharField(blank=True, max_length=256)),
                ('middle_name', models.CharField(blank=True, max_length=256)),
                ('is_user', models.BooleanField(default=True)),
                ('is_administrator', models.BooleanField(default=False)),
                ('is_department_head', models.BooleanField(default=False)),
                ('is_panel', models.BooleanField(default=False)),
                ('is_adviser', models.BooleanField(default=False)),
                ('is_subject_teacher', models.BooleanField(default=False)),
                ('is_academic_affairs', models.BooleanField(default=False)),
                ('is_library', models.BooleanField(default=False)),
                ('is_research_extension', models.BooleanField(default=False)),
                ('is_student', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
